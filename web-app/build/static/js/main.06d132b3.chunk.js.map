{"version":3,"sources":["App.js","apiKeys.js","serviceWorker.js","index.js"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","App","props","uploadIntruderImageToStorage","image","id","uuidv4","fileType","type","toString","replace","storageRef","child","put","then","db","ref","push","imageId","console","log","uploadAuthorizedImageToStorage","name","state","file","intruder","handleChange","bind","handleSubmit","setAuthorized","setIntruder","onChange","firebase","initializeApp","database","storage","event","this","setState","target","value","undefined","URL","createObjectURL","files","rawFile","error","alert","window","location","reload","className","Image","src","thumbnail","Form","Col","Button","variant","class","for","onClick","Group","Control","placeholder","size","disabled","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.06d132b3.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as APIKEYS from './apiKeys';\r\nimport firebase from 'firebase'\r\nimport { Image, Button, Form, Col } from 'react-bootstrap';\r\nimport './App.css';\r\nimport uuidv4 from 'uuid/v4';\r\n\r\nconst config = {\r\n  apiKey: APIKEYS.apiKey,\r\n  authDomain: APIKEYS.authDomain,\r\n  databaseURL: APIKEYS.databaseURL,\r\n  projectId: APIKEYS.projectId,\r\n  storageBucket: APIKEYS.storageBucket,\r\n  messagingSenderId: APIKEYS.messagingSenderId,\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      file: null,\r\n      intruder: true\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n    this.setAuthorized = this.setAuthorized.bind(this)\r\n    this.setIntruder = this.setIntruder.bind(this)\r\n    this.onChange = this.onChange.bind(this)\r\n    this.uploadIntruderImageToStorage = this.uploadIntruderImageToStorage.bind(this)\r\n    this.uploadAuthorizedImageToStorage = this.uploadAuthorizedImageToStorage.bind(this)\r\n    firebase.initializeApp(config);\r\n    this.db = firebase.database();\r\n    this.storageRef = firebase.storage().ref();\r\n  }\r\n\r\n  uploadIntruderImageToStorage = (image) => {\r\n    let id = uuidv4();\r\n    let fileType = image.type.toString().replace(\"image/\", \".\");\r\n    return this.storageRef.child(id).put(image)\r\n      .then(() => {\r\n        this.db.ref('/intruders/').push({\r\n          imageId: id + fileType\r\n        });\r\n        console.log(`\"${id} Uploaded Successfully`);\r\n      })\r\n  }\r\n\r\n  uploadAuthorizedImageToStorage = (image) => {\r\n    let id = uuidv4();\r\n    let fileType = image.type.toString().replace(\"image/\", \".\");\r\n    return this.storageRef.child(id).put(image)\r\n      .then(() => {\r\n        this.db.ref('/authorized/').push({\r\n          imageId: id + fileType,\r\n          name: this.state.name\r\n        });\r\n        console.log(`\"${id} Uploaded Successfully`);\r\n      })\r\n  }\r\n\r\n  onChange(event) {\r\n    this.setState({\r\n      ...this.state,\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  setIntruder() {\r\n    this.setState({\r\n      ...this.state,\r\n      intruder: true,\r\n      name: undefined\r\n    });\r\n  }\r\n\r\n  setAuthorized() {\r\n    this.setState({\r\n      ...this.state,\r\n      intruder: false\r\n    });\r\n  }\r\n\r\n  handleChange(event) {\r\n    try {\r\n      this.setState({\r\n        ...this.state,\r\n        file: URL.createObjectURL(event.target.files[0]),\r\n        rawFile: event.target.files[0]\r\n      })\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  handleSubmit() {\r\n    if (this.state.intruder) {\r\n      this.uploadIntruderImageToStorage(this.state.rawFile);\r\n    } else {\r\n      this.uploadAuthorizedImageToStorage(this.state.rawFile);\r\n    }\r\n    alert(\"File Uploaded Successfully\");\r\n    window.location.reload()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Image src={this.state.file} thumbnail />\r\n        <Form>\r\n          <Col>\r\n            <br />\r\n            <Image className='upload' src={\"https://image.freepik.com/free-icon/upload-document_318-8461.jpg\"} />\r\n            <br />\r\n            <Button variant=\"dark\">\r\n              <input type=\"file\" onChange={this.handleChange} name=\"file\" id=\"file\" class=\"inputfile\" />\r\n              <label for=\"file\">Upload Image</label>\r\n            </Button>\r\n            <hr />\r\n            <Button onClick={this.setIntruder} variant={this.state.intruder ? \"dark\" : \"outline-dark\"}>Intruder</Button>\r\n            <Button onClick={this.setAuthorized} variant={this.state.intruder ? \"outline-dark\" : \"dark\"}>Authorized</Button>\r\n            <Form.Group>\r\n              {!this.state.intruder ? <div>\r\n                <br />\r\n                <Form.Control onChange={this.onChange} name=\"name\" placeholder=\"Name\" value={this.state.name} />\r\n              </div> : null}\r\n            </Form.Group>\r\n            <hr />\r\n            <Button onClick={this.handleSubmit} variant=\"dark\" size=\"lg\" disabled={!this.state.file || (!this.state.name && !this.state.intruder) ? true : false}>Submit</Button>\r\n          </Col>\r\n        </Form>\r\n      </div >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","export const apiKey = \"AIzaSyCIb7b77N6OHaFsUwsxuiiRJMtUfoC0ubs\";\r\nexport const authDomain = \"spaces-f099d.firebaseapp.com\";\r\nexport const databaseURL = \"https://spaces-f099d.firebaseio.com\";\r\nexport const projectId = \"spaces-f099d\";\r\nexport const storageBucket = \"spaces-f099d.appspot.com\";\r\nexport const messagingSenderId = \"1083321987106\";\r\nexport const appId = \"1:1083321987106:web:9ef53727017fd5615b1a7b\";\r\nexport const measurementId = \"G-SCWQKQQQJX\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}